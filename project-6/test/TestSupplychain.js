// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const ownerID = accounts[0];
    const originFarmerID = accounts[1];
    const originFarmName = "John Doe";
    const originFarmInformation = "Yarray Valley";
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    var productID = sku + upc;
    const productNotes = "Best beans for Espresso";
    const productPrice = web3.utils.toWei(String(1), "ether");
    var itemState = 0;
    const distributorID = accounts[2];
    const retailerID = accounts[3];
    const consumerID = accounts[4];
    const emptyAddress = '0x00000000000000000000000000000000000000';

    ///Available Accounts
    ///==================
    // (0) 0x906c60a98bc4128f87bdf155147b3626d49dac43
    // (1) 0xffd0cbb612fe434b4a169a4e6d7387ae71bf4c8d
    // (2) 0x4cb1e4eecb510fde8cf06f8eceffb68927fb8777
    // (3) 0xbb87376b8be12ac19e4ad288009325bdbed2a6c1
    // (4) 0x14455ab9e5be56c2d7721ddc1af6fb1be6599b56
    // (5) 0xcca7a1820b691ce002b1e2be8395a807329a6f66
    // (6) 0x8cd1eff023d0b904c81af1055e462f42058769a1
    // (7) 0x6c4e064eb651362d9197f7c118fa455e7b1ea873
    // (8) 0xb41e5c2cd5c51f7162dd39ac040c0cf04646743f
    // (9) 0xb8c558b681c8e45544bbcb2d255e47c45b1521ff

    console.log("ganache-cli accounts used here...");
    console.log("Contract Owner: ", accounts[0]);
    console.log("Farmer: ", accounts[1]);
    console.log("Distributor: ", accounts[2]);
    console.log("Retailer: ", accounts[3]);
    console.log("Consumer: ", accounts[4]);

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed();        
        await supplyChain.addFarmer(originFarmerID, {from: ownerID}); 
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Harvested()
         await supplyChain.contract.events.Harvested((err, res) => {
             eventEmitted = true;
         })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes);

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set        
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        //Check if farmer is in the farmers mapping, if not add it
        if(!(await supplyChain.isFarmer(originFarmerID))){            
            await supplyChain.addFarmer(originFarmerID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
            await supplyChain.contract.events.Processed((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from:originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], "0x" + "0".repeat(40), 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], "0x" + "0".repeat(40), 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], "0x" + "0".repeat(40), 'Error: Missing or Invalid consumerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        //Check if farmer is in the farmers mapping, if not add it
        if(!(await supplyChain.isFarmer(originFarmerID))){            
            await supplyChain.addFarmer(originFarmerID, {from: ownerID}); 
        }
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        await supplyChain.contract.events.Packed((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from:originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], "0x" + "0".repeat(40), 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], "0x" + "0".repeat(40), 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], "0x" + "0".repeat(40), 'Error: Missing or Invalid consumerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');        
    });

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        //Check if farmer is in the farmers mapping, if not add it
        if(!(await supplyChain.isFarmer(originFarmerID))){            
            await supplyChain.addFarmer(originFarmerID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event ForSale()        
        await supplyChain.contract.events.ForSale((err, res) => {
            eventEmitted = true;
        })        

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], "0x" + "0".repeat(40), 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], "0x" + "0".repeat(40), 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], "0x" + "0".repeat(40), 'Error: Missing or Invalid consumerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');          
    });

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        //Check if farmer is in the farmers mapping, if not add it
        if(!(await supplyChain.isDistributor(distributorID))){            
            await supplyChain.addDistributor(distributorID, {from: ownerID}); 
        }    
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Sold()        
        await supplyChain.contract.events.Sold((err, res) => {
            eventEmitted = true;
        });

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from:distributorID, value: web3.utils.toWei("1.2", "ether")});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc); 

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], "0x" + "0".repeat(40), 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], "0x" + "0".repeat(40), 'Error: Missing or Invalid consumerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');        
    });

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        //Check if farmer is in the farmers mapping, if not add it
        if(!(await supplyChain.isDistributor(distributorID))){            
            await supplyChain.addDistributor(distributorID, {from: ownerID}); 
        }    

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Shipped()
        await supplyChain.contract.events.Shipped((err, res) => {
            eventEmitted = true;
        });

        // Mark an item as Sold by calling function shipItem()
        await supplyChain.shipItem(upc, {from:distributorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);       

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], "0x" + "0".repeat(40), 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], "0x" + "0".repeat(40), 'Error: Missing or Invalid consumerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');             
    });

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        //Check if farmer is in the retailers mapping, if not add it
        if(!(await supplyChain.isRetailer(retailerID))){            
            await supplyChain.addRetailer(retailerID, {from: ownerID}); 
        }        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Received()
        await supplyChain.contract.events.Received((err, res) => {
            eventEmitted = true;
        });        

        // Mark an item as Sold by calling function receiveItem()
        await supplyChain.receiveItem(upc, {from:retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);          

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], "0x" + "0".repeat(40), 'Error: Missing or Invalid consumerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');            
    });


    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        //Check if consumer is in the retailers mapping, if not add it
        if(!(await supplyChain.isConsumer(consumerID))){            
            await supplyChain.addConsumer(consumerID, {from: ownerID}); 
        } 

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Purchased()
        await supplyChain.contract.events.Purchased((err, res) => {
            eventEmitted = true;
        });           

        // Mark an item as Sold by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, {from:consumerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);         

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');       
    });

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        
    });

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);         
        
        // Verify the result set:
         assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU');
         assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
         assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id');
         assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid product notes');
         assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid product price');
         assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
         assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
         assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID');
         assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID');       
    })
});

